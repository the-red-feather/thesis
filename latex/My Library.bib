
@misc{noauthor_grass_2022,
	title = {{GRASS} {GIS} {Repository}},
	url = {https://github.com/OSGeo/grass},
	abstract = {GRASS GIS - free and open source Geographic Information System (GIS)},
	urldate = {2022-08-11},
	publisher = {Open Source Geospatial Foundation},
	month = aug,
	year = {2022},
	note = {original-date: 2019-05-17T16:13:33Z},
	keywords = {earth-observation, geospatial, geospatial-analysis, gis, grass-gis, hacktoberfest, open-science, osgeo, raster, remote-sensing, science, spatial, timeseries-analysis, vector},
}

@misc{noauthor_gdal_2022,
	title = {{GDAL} - {Geospatial} {Data} {Abstraction} {Library}},
	url = {https://github.com/OSGeo/gdal},
	abstract = {GDAL is an open source X/MIT licensed translator library for raster and vector geospatial data formats.},
	urldate = {2022-08-11},
	publisher = {Open Source Geospatial Foundation},
	month = aug,
	year = {2022},
	note = {original-date: 2012-10-09T21:39:58Z},
	keywords = {raster, remote-sensing, vector, geospatial-data},
}

@misc{noauthor_proj_2022,
	title = {{PROJ}},
	url = {https://github.com/OSGeo/PROJ},
	abstract = {PROJ - Cartographic Projections and Coordinate Transformations Library},
	urldate = {2022-08-11},
	publisher = {Open Source Geospatial Foundation},
	month = aug,
	year = {2022},
	note = {original-date: 2015-05-22T07:00:08Z},
}

@misc{noauthor_difference_nodate,
	title = {Difference {Between} {Frontend} and {Backend} {MVC} - {Joomlatuts}},
	url = {https://web.archive.org/web/20161230230237/http://joomlatuts.net/joomla-2-5/87-how-backend-model-view-controller-mvc-works-in-joomla/98-difference-between-frontend-and-backend-mvc},
	urldate = {2022-08-12},
	file = {Difference Between Frontend and Backend MVC - Joomlatuts:C\:\\Users\\Feenster\\Zotero\\storage\\UE5VQTSS\\98-difference-between-frontend-and-backend-mvc.html:text/html},
}

@misc{wickramarachchi_bff_2021,
	title = {The {BFF} {Pattern} ({Backend} for {Frontend}): {An} {Introduction}},
	shorttitle = {The {BFF} {Pattern} ({Backend} for {Frontend})},
	url = {https://blog.bitsrc.io/bff-pattern-backend-for-frontend-an-introduction-e4fa965128bf},
	abstract = {Get to know the benefits of using BFF pattern in practice},
	language = {en},
	urldate = {2022-08-12},
	journal = {Medium},
	author = {Wickramarachchi, Viduni},
	month = aug,
	year = {2021},
	file = {Snapshot:C\:\\Users\\Feenster\\Zotero\\storage\\AZI9JAEA\\bff-pattern-backend-for-frontend-an-introduction-e4fa965128bf.html:text/html},
}

@article{corsini_efficient_2012,
	title = {Efficient and {Flexible} {Sampling} with {Blue} {Noise} {Properties} of {Triangular} {Meshes}},
	volume = {18},
	doi = {10.1109/TVCG.2012.34},
	abstract = {This paper deals with the problem of taking random samples over the surface of a 3D mesh describing and evaluating efficient algorithms for generating different distributions. We discuss first the problem of generating a Monte Carlo distribution in an efficient and practical way avoiding common pitfalls. Then, we propose Constrained Poisson-disk sampling, a new Poisson-disk sampling scheme for polygonal meshes which can be easily tweaked in order to generate customized set of points such as importance sampling or distributions with generic geometric constraints. In particular, two algorithms based on this approach are presented. An in-depth analysis of the frequency characterization and performance of the proposed algorithms are also presented and discussed.},
	journal = {IEEE transactions on visualization and computer graphics},
	author = {Corsini, Massimiliano and Cignoni, Paolo and Scopigno, Roberto},
	month = jan,
	year = {2012},
	pages = {914--24},
	file = {Full Text PDF:C\:\\Users\\Feenster\\Zotero\\storage\\346UV793\\Corsini et al. - 2012 - Efficient and Flexible Sampling with Blue Noise Pr.pdf:application/pdf},
}

@article{kuhail_characterizing_2021,
	title = {Characterizing {Visual} {Programming} {Approaches} for {End}-{User} {Developers}: {A} {Systematic} {Review}},
	volume = {9},
	issn = {2169-3536},
	shorttitle = {Characterizing {Visual} {Programming} {Approaches} for {End}-{User} {Developers}},
	doi = {10.1109/ACCESS.2021.3051043},
	abstract = {Recently many researches have explored the potential of visual programming in robotics, the Internet of Things (IoT), and education. However, there is a lack of studies that analyze the recent evidence-based visual programming approaches that are applied in several domains. This study presents a systematic review to understand, compare, and reflect on recent visual programming approaches using twelve dimensions: visual programming classification, interaction style, target users, domain, platform, empirical evaluation type, test participants' type, number of test participants, test participants' programming skills, evaluation methods, evaluation measures, and accessibility of visual programming tools. The results show that most of the selected articles discussed tools that target IoT and education, while other fields such as data science, robotics are emerging. Further, most tools use abstractions to hide implementation details and use similar interaction styles. The predominant platforms for the tools are web and mobile, while desktop-based tools are on the decline. Only a few tools were evaluated with a formal experiment, whilst the remaining ones were evaluated with evaluation studies or informal feedback. Most tools were evaluated with students with little to no programming skills. There is a lack of emphasis on usability principles in the design stage of the tools. Additionally, only one of the tools was evaluated for expressiveness. Other areas for exploration include supporting end users throughout the life cycle of applications created with the tools, studying the impact of tutorials on improving learnability, and exploring the potential of machine learning to improve debugging solutions developed with visual programming.},
	journal = {IEEE Access},
	author = {Kuhail, Mohammad Amin and Farooq, Shahbano and Hammad, Rawad and Bahja, Mohammed},
	year = {2021},
	note = {Conference Name: IEEE Access},
	keywords = {Computer languages, end-user development, human-computer interaction, Programming profession, Robots, Software, systematic literature review, Systematics, Tools, Visual programming, Visualization},
	pages = {14181--14202},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\Feenster\\Zotero\\storage\\HT83BZIN\\9320477.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\Feenster\\Zotero\\storage\\SWVZCG72\\Kuhail et al. - 2021 - Characterizing Visual Programming Approaches for E.pdf:application/pdf},
}

@article{johnston_advances_2004,
	title = {Advances in dataflow programming languages},
	volume = {36},
	issn = {0360-0300},
	url = {https://doi.org/10.1145/1013208.1013209},
	doi = {10.1145/1013208.1013209},
	abstract = {Many developments have taken place within dataflow programming languages in the past decade. In particular, there has been a great deal of activity and advancement in the field of dataflow visual programming languages. The motivation for this article is to review the content of these recent developments and how they came about. It is supported by an initial review of dataflow programming in the 1970s and 1980s that led to current topics of research. It then discusses how dataflow programming evolved toward a hybrid von Neumann dataflow formulation, and adopted a more coarse-grained approach. Recent trends toward dataflow visual programming languages are then discussed with reference to key graphical dataflow languages and their development environments. Finally, the article details four key open topics in dataflow programming languages.},
	number = {1},
	urldate = {2022-06-15},
	journal = {ACM Computing Surveys},
	author = {Johnston, Wesley M. and Hanna, J. R. Paul and Millar, Richard J.},
	month = mar,
	year = {2004},
	keywords = {co-ordination languages, component software, data flow visual programming, Dataflow, graphical programming, multithreading, software engineering},
	pages = {1--34},
	file = {Full Text PDF:C\:\\Users\\Feenster\\Zotero\\storage\\8JI6UIUC\\Johnston et al. - 2004 - Advances in dataflow programming languages.pdf:application/pdf},
}

@misc{noauthor_ladder_nodate,
	title = {Ladder {Diagram} ({LD}) {Programming} {\textbar} {Basics} of {Programmable} {Logic} {Controllers} ({PLCs}) {\textbar} {Automation} {Textbook}},
	url = {https://control.com/textbook/programmable-logic-controllers/ladder-diagram-ld-programming/},
	abstract = {Read about Ladder Diagram (LD) Programming (Basics of Programmable Logic Controllers (PLCs)) in our free Automation Textbook},
	language = {en},
	urldate = {2022-06-09},
	file = {Snapshot:C\:\\Users\\Feenster\\Zotero\\storage\\2LNVAIIQ\\ladder-diagram-ld-programming.html:text/html},
}

@inproceedings{benac_recent_2022,
	address = {Cham},
	series = {Lecture {Notes} in {Networks} and {Systems}},
	title = {Recent {Trends} in {Software} {Development}: {Low}-{Code} {Solutions}},
	isbn = {978-3-030-89912-7},
	shorttitle = {Recent {Trends} in {Software} {Development}},
	doi = {10.1007/978-3-030-89912-7_41},
	abstract = {This paper mainly serves as a summary of the recent software development trend of low-code platforms. It discusses many uses of the applications, company created low-code programs, and risks and benefits in using low-coding solutions. I reach the conclusion that low-coding is still gaining momentum and will continue to increase and develop in the future. This may in fact be the future of most coding experience.},
	language = {en},
	booktitle = {Proceedings of the {Future} {Technologies} {Conference} ({FTC}) 2021, {Volume} 3},
	publisher = {Springer International Publishing},
	author = {Benac, Ryan and Mohd, Tauheed Khan},
	editor = {Arai, Kohei},
	year = {2022},
	keywords = {Low-code, Software development},
	pages = {525--533},
	file = {Full Text PDF:C\:\\Users\\Feenster\\Zotero\\storage\\HUMUCXY5\\Benac and Khan Mohd - 2022 - Recent Trends in Software Development Low-Code So.pdf:application/pdf},
}

@book{gamma_design_1994,
	address = {Reading, Mass},
	edition = {1st edition},
	title = {Design {Patterns}: {Elements} of {Reusable} {Object}-{Oriented} {Software}},
	isbn = {978-0-201-63361-0},
	shorttitle = {Design {Patterns}},
	language = {English},
	publisher = {Addison-Wesley Professional},
	author = {Gamma, Erich and Helm, Richard and Johnson, Ralph and Vlissides, John and Booch, Grady},
	month = nov,
	year = {1994},
}

@misc{noauthor_modellab_nodate,
	title = {{ModelLab}: {A} {Cloud}-{Based} {Platform} to {Support} {Advanced} {Geospatial} {Modeling} of {Earth} {Observation} {Data} {\textbar} {NASA} {SBIR} \& {STTR} {Program} {Homepage}},
	url = {https://sbir.nasa.gov/content/modellab-cloud-based-platform-support-advanced-geospatial-modeling-earth-observation-data},
	urldate = {2022-04-29},
	file = {ModelLab\: A Cloud-Based Platform to Support Advanced Geospatial Modeling of Earth Observation Data | NASA SBIR & STTR Program Homepage:C\:\\Users\\Feenster\\Zotero\\storage\\NT22F7I2\\modellab-cloud-based-platform-support-advanced-geospatial-modeling-earth-observation-data.html:text/html},
}

@misc{noauthor_modellab_2020,
	title = {{ModelLab}: {A} {Cloud}-{Based} {Platform} to {Support} {Advanced} {Geospatial} {Modeling} of {Earth} {Observation} {Data}, {Phase} {II}},
	shorttitle = {{ModelLab}},
	url = {https://catalog.data.gov/dataset/modellab-a-cloud-based-platform-to-support-advanced-geospatial-modeling-of-earth-observati-92523},
	abstract = {In order to promote and facilitate broader use of NASA and other Earth observation data sources, the Phase I research focused on development of a cloud-based distributed computation platform for building, storing, and executing complex geospatial models.  Widespread access to frequent, high-resolution Earth observation imagery has created the need for innovative tools like ModelLab that will help individuals and organizations to effectively access, analyze, edit, and visualize remotely sensed data in transformative new ways without years of specialized training or ongoing investments in proprietary software and technology infrastructure.  The Phase II production application will be built as an on-demand, browser-based service that provides a unique assemblage of online authoring tools, searchable libraries of geospatial modeling functions, educational materials, distributed computing capabilities enabled by the open source GeoTrellis framework, and access to NASA and other sensor data that can be applied to contemporary geospatial challenges in a broad range of domains. Further, it will both simplify and shorten the development process for a host of model-driven software applications by providing developers with a growing catalog of well-crafted models to build and innovate from.  Specific goals for Phase II include adding a searchable gallery of geospatial models that can be harnessed to perform specific tasks, enhancing the user experience, adding support for user data upload, extending the data repository with national and global-scale datasets, providing access to NASA APIs, enabling multi-band processing capabilities, and performing iterative testing with an expanded Advisory Team and a larger group of students and potential customers.},
	language = {en},
	urldate = {2022-04-29},
	publisher = {Space Technology Mission Directorate},
	month = jan,
	year = {2020},
	note = {Type: dataset},
	keywords = {active, stennis-space-center},
}

@article{arroyo_ohori_azul_2020,
	title = {azul: {A} fast and efficient {3D} city model viewer for {macOS}},
	volume = {24},
	issn = {1467-9671},
	shorttitle = {azul},
	url = {https://onlinelibrary.wiley.com/doi/abs/10.1111/tgis.12673},
	doi = {10.1111/tgis.12673},
	abstract = {3D city models are an important research topic within geographic information, but there is still a lack of good tools to work with them in practice. In an attempt to alleviate this problem and to help with our own research, we have developed azul, a free and open-source macOS 3D viewer that was especially engineered for the visualization of 3D city models. The aim of this article is, first of all, to describe the inner workings of azul as a complete methodology to efficiently visualize 3D city models, and which can be also applied to other hierarchically structured data models, which are becoming more prevalent in geographic information. In addition, the article has three ancillary goals: (a) to present other general-purpose methods that are useful to efficiently process 3D city models (e.g., robust error-correcting parsers and data models that can be used with multiple formats); (b) to describe technical issues and problematic aspects related to current 3D city model formats that are known by developers but are not properly documented in the scientific literature; and (c) to foster an open discussion about the best data structures and algorithms to process 3D city models in practice.},
	language = {en},
	number = {5},
	urldate = {2022-04-19},
	journal = {Transactions in GIS},
	author = {Arroyo Ohori, Ken},
	year = {2020},
	note = {\_eprint: https://onlinelibrary.wiley.com/doi/pdf/10.1111/tgis.12673},
	pages = {1165--1184},
	file = {Full Text PDF:C\:\\Users\\Feenster\\Zotero\\storage\\23TJXMRM\\Arroyo Ohori - 2020 - azul A fast and efficient 3D city model viewer fo.pdf:application/pdf;Snapshot:C\:\\Users\\Feenster\\Zotero\\storage\\Q87C9KMV\\tgis.html:text/html},
}

@article{vitalis_cityjson_2020,
	title = {{CITYJSON} + {WEB} = {NINJA}: 3rd {BIM}/{GIS} {Integration} {Workshop} and 15th {3D} {GeoInfo} {Conference} 2020},
	volume = {6},
	issn = {2194-9042},
	shorttitle = {{CITYJSON} + {WEB} = {NINJA}},
	url = {http://www.scopus.com/inward/record.url?scp=85094149197&partnerID=8YFLogxK},
	doi = {10.5194/isprs-annals-VI-4-W1-2020-167-2020},
	abstract = {As web applications become more popular, 3D city models would greatly benefit from a proper web-based solution to visualise and manage them. CityJSON was introduced as a JSON encoding of the CityGML data model and promises, among several benefits, the ability to be integrated with modern web technologies. In order to provide an implementation of a web application for CityJSON data, that can be used as a reference for other applications, we developed ninja. It is a web application that allows the user to easily load and investigate a CityJSON model through a web browser. In addition, it offers support for a complex feature of CityJSON: the experimental versioning mechanism. In this paper, we describe the motivation, requirements, technical aspects and achieved functionality of ninja. We believe that such a web application can facilitate the adoption of 3D city models by more practitioners and decision makers.},
	number = {4/W1},
	urldate = {2022-04-19},
	journal = {ISPRS Annals of Photogrammetry, Remote Sensing and Spatial Information Sciences},
	author = {Vitalis, S. and Labetski, A. and Boersma, F. and Dahle, F. and Li, X. and Arroyo Ohori, K. and Ledoux, H. and Stoter, J.},
	year = {2020},
	keywords = {3D City Modelling, CityJSON, Versioning, Visualisation, Web application},
	pages = {167--173},
	file = {Full Text:C\:\\Users\\Feenster\\Zotero\\storage\\KWNWVW8T\\Vitalis et al. - 2020 - CITYJSON + WEB = NINJA 3rd BIMGIS Integration Wo.pdf:application/pdf},
}

@inproceedings{griwodz_alicevision_2021,
	address = {Istanbul, Turkey},
	title = {{AliceVision} {Meshroom}: {An} open-source {3D} reconstruction pipeline},
	shorttitle = {{AliceVision} {Meshroom}},
	url = {https://hal.archives-ouvertes.fr/hal-03351139},
	doi = {10.1145/3458305.3478443},
	abstract = {This paper introduces the Meshroom software and its underlying 3D computer vision framework AliceVision. This solution provides a photogrammetry pipeline to reconstruct 3D scenes from a set of unordered images. It also features other pipelines for fusing multi-bracketing low dynamic range images into high dynamic range, stitching multiple images into a panorama and estimating the motion of a moving camera. Meshroom's nodal architecture allows the user to customize the different pipelines to adjust them to their domain specific needs. The user can interactively add other processing nodes to modify a pipeline, export intermediate data},
	urldate = {2022-01-14},
	booktitle = {12th {ACM} {Multimedia} {Systems} {Conference} ({MMSys} 2021)},
	publisher = {ACM: Association for Computing Machinery},
	author = {Griwodz, Carsten and Gasparini, Simone and Calvet, Lilian and Gurdjos, Pierre and Castan, Fabien and Maujean, Benoit and Lanthony, Yann and De Lillo, Gregoire},
	month = sep,
	year = {2021},
	pages = {241--247},
	file = {HAL PDF Full Text:C\:\\Users\\Feenster\\Zotero\\storage\\APXADY29\\Griwodz et al. - 2021 - AliceVision Meshroom An open-source 3D reconstruc.pdf:application/pdf},
}

@misc{qgis_community_qgis_2022,
	title = {{QGIS} {Homepage}},
	url = {https://www.qgis.org/en/site/},
	urldate = {2022-01-06},
	author = {QGIS Community},
	year = {2022},
	file = {Welcome to the QGIS project!:C\:\\Users\\Feenster\\Zotero\\storage\\GX9CTID7\\site.html:text/html},
}

@misc{esri_arcgis_2022,
	title = {{ArcGIS} {Homepage}},
	url = {https://www.arcgis.com/index.html},
	urldate = {2022-01-06},
	author = {Esri},
	year = {2022},
	file = {Account Login - ArcGIS Online:C\:\\Users\\Feenster\\Zotero\\storage\\FDZ3ZNAC\\index.html:text/html},
}

@misc{ogc_web_2015,
	title = {Web {Processing} {Service}},
	url = {https://www.ogc.org/standards/wps},
	urldate = {2021-12-22},
	author = {OGC, Open Geospatial Consortium},
	year = {2015},
	file = {Web Processing Service | OGC:C\:\\Users\\Feenster\\Zotero\\storage\\VNEPAWYE\\wps.html:text/html},
}

@misc{clack_standardizing_2019,
	title = {Standardizing {WASI}: {A} system interface to run {WebAssembly} outside the web – {Mozilla} {Hacks} - the {Web} developer blog},
	shorttitle = {Standardizing {WASI}},
	url = {https://hacks.mozilla.org/2019/03/standardizing-wasi-a-webassembly-system-interface},
	abstract = {WebAssembly is an assembly language for a conceptual machine, not a physical one. This is why it can be run across a variety of different machine architectures. WebAssembly needs a ...},
	language = {en-US},
	urldate = {2021-12-22},
	journal = {Mozilla Hacks – the Web developer blog},
	author = {Clack, Lin},
	month = mar,
	year = {2019},
	file = {Snapshot:C\:\\Users\\Feenster\\Zotero\\storage\\64YPDJGI\\standardizing-wasi-a-webassembly-system-interface.html:text/html},
}

@misc{peters_geoflow_2019,
	title = {Geoflow},
	author = {Peters, Ravi},
	year = {2019},
	file = {ravi-peter-geoflow.pdf:C\:\\Users\\Feenster\\Zotero\\storage\\FUT6PJI7\\ravi-peter-geoflow.pdf:application/pdf},
}

@article{green_usability_1996,
	title = {Usability {Analysis} of {Visual} {Programming} {Environments}: {A} ‘{Cognitive} {Dimensions}’ {Framework}},
	volume = {7},
	issn = {1045-926X},
	shorttitle = {Usability {Analysis} of {Visual} {Programming} {Environments}},
	url = {https://www.sciencedirect.com/science/article/pii/S1045926X96900099},
	doi = {10.1006/jvlc.1996.0009},
	abstract = {The cognitive dimensions framework is a broad-brush evaluation technique for interactive devices and for non-interactive notations. It sets out a small vocabulary of terms designed to capture the cognitively-relevant aspects of structure, and shows how they can be traded off against each other. The purpose of this paper is to propose the framework as an evaluation technique for visual programming environments. We apply it to two commercially-available dataflow languages (with further examples from other systems) and conclude that it is effective and insightful; other HCI-based evaluation techniques focus on different aspects and would make good complements. Insofar as the examples we used are representative, current VPLs are successful in achieving a good ‘closeness of match’, but designers need to consider the ‘viscosity ’ (resistance to local change) and the ‘secondary notation’ (possibility of conveying extra meaning by choice of layout, colour, etc.).},
	language = {en},
	number = {2},
	urldate = {2021-12-03},
	journal = {Journal of Visual Languages \& Computing},
	author = {Green, T. R. G. and Petre, M.},
	month = jun,
	year = {1996},
	pages = {131--174},
	file = {Green and Petre - 1996 - Usability Analysis of Visual Programming Environme.pdf:C\:\\Users\\Feenster\\Zotero\\storage\\K8R3ZQ8V\\Green and Petre - 1996 - Usability Analysis of Visual Programming Environme.pdf:application/pdf;ScienceDirect Snapshot:C\:\\Users\\Feenster\\Zotero\\storage\\64AIDNDQ\\S1045926X96900099.html:text/html},
}

@misc{melch_performance_2019,
	title = {Performance comparison of simplification algorithms for polygons in the context of web applications},
	url = {https://qgit.de/melch/mt-polygon-simplification/raw/commit/9f19a7b3c2fd086d3a387a200a761e20c3d7bacd/build/mt-polygon-simplification-2019.pdf},
	author = {Melch, Alfred},
	year = {2019},
	file = {mt-polygon-simplification-2019.pdf:C\:\\Users\\Feenster\\Zotero\\storage\\CXHIRJU4\\mt-polygon-simplification-2019.pdf:application/pdf},
}

@misc{mozilla_asmjs_2013,
	title = {asm.js},
	url = {http://asmjs.org/},
	author = {Mozilla},
	year = {2013},
}

@inproceedings{mark_d_wilkinson_fair_2016,
	title = {The {FAIR} {Guiding} {Principles} for scientific data management and stewardship.},
	abstract = {Michel Dumontier, IJsbrand Jan Aalbersberg, Gabrielle},
	author = {{Mark D Wilkinson} and {Appleton, Myles Axton, Arie Baak, Niklas Blomberg, Jan-Willem Boiten,} and {Luiz Bonino da Silva Santos, Philip E Bourne, et al.}},
	year = {2016},
}

@phdthesis{brink_geospatial_2018,
	title = {Geospatial {Data} on the {Web}},
	url = {https://github.com/lvdbrink/thesis/blob/6b17c47f332c678d43ea788c58c5e18dbcd14acc/phdthesis-final.pdf},
	abstract = {My PhD thesis "Geospatial Data on the Web"},
	urldate = {2021-11-30},
	school = {TU Delft},
	author = {Brink, Linda van den},
	month = nov,
	year = {2018},
	note = {original-date: 2018-10-12T08:52:14Z},
}

@phdthesis{hamilton_client-side_2014,
	type = {Thesis},
	title = {Client-side versus {Server}-side {Geoprocessing}: {Benchmarking} the {Performance} of {Web} {Browsers} {Processing} {Geospatial} {Data} {Using} {Common} {GIS} {Operations}},
	shorttitle = {Client-side versus {Server}-side {Geoprocessing}},
	url = {https://minds.wisconsin.edu/handle/1793/74947},
	abstract = {Web-based GIS and mapping applications are traditionally based on a client-server model, where most of the data processing work is placed on the server, but current trends in web applications are moving towards more interactivity and processing tasks on the client. This study examines what happens when that processing load is shifted to the client using JavaScript to process geospatial data directly in the browser. The results indicated that the server was faster than the client in all testing scenarios, and only when processing generalized small scale data, was the client performance in an acceptable time range. These results demonstrated that the current implementation of web browsers are limited in their ability to execute JavaScript geoprocessing and not yet prepared to process data sizes larger than about 7,000 to 10,000 vertices before either prompting an unresponsive script warning in the browser or potentially losing the interest of the user.},
	language = {en\_US},
	urldate = {2021-10-21},
	school = {-},
	author = {Hamilton, Erin L.},
	year = {2014},
	note = {Accepted: 2016-06-02T21:00:45Z},
	file = {Full Text PDF:C\:\\Users\\Feenster\\Zotero\\storage\\QDK456C7\\Hamilton - 2014 - Client-side versus Server-side Geoprocessing Benc.pdf:application/pdf;Snapshot:C\:\\Users\\Feenster\\Zotero\\storage\\HYKBB638\\74947.html:text/html},
}

@inproceedings{panidi_hybrid_2015,
	title = {Hybrid {Geoprocessing} {Web} {Services}},
	url = {https://elibrary.ru/item.asp?id=43026224},
	doi = {10.5593/SGEM2015/B21/S8.084},
	abstract = {Interactive geospatial data manipulation and online geospatial data processing techniques implementation are the current highly valuable trends in evolution of the Web mapping and Web GIS (Geographic Information System) technologies. The key paradigm of current Web GISs architecture is a server-side geoprocessing, which is based on Client/Server or Cloud architecture. This approach is used both in open standards and in enterprise technological chains. Current Web GIS technology not uses the client-side geoprocessing as an industrial level approach. Also the capabilities of the client-side geoprocessing are not covered in the current international geospatial standards. The paper and underlying research project are focused on investigation of the conceptual approaches to implementation of the client-side geoprocessing and its benefits. The conception of the Hybrid Geoprocessing Web Services is described, which should make possible to combine the advantages of server-side and client-side geoprocessing.},
	language = {en},
	urldate = {2021-10-21},
	booktitle = {-},
	author = {Panidi, E. and Kazakov, E. and Kapralov, E. and Terekhov, A.},
	year = {2015},
	keywords = {Client-Side Web Geoprocessing, Hybrid Geoprocessing Web Services, Open Geospatial Consortium Web Processing Service},
	pages = {669--676},
	file = {Submitted Version:C\:\\Users\\Feenster\\Zotero\\storage\\EA68PUYE\\Panidi et al. - 2015 - Hybrid Geoprocessing Web Services.pdf:application/pdf},
}

@misc{w3c_world_2019,
	title = {World {Wide} {Web} {Consortium} ({W3C}) brings a new language to the {Web} as {WebAssembly} becomes a {W3C} {Recommendation}},
	url = {https://www.w3.org/2019/12/pressrelease-wasm-rec.html.en},
	urldate = {2021-11-30},
	author = {w3c},
	year = {2019},
	file = {World Wide Web Consortium (W3C) brings a new language to the Web as WebAssembly becomes a W3C Recommendation:C\:\\Users\\Feenster\\Zotero\\storage\\IYVEDQVY\\pressrelease-wasm-rec.html.html:text/html},
}

@misc{google_google_2020,
	title = {Google {Earth}},
	url = {https://earth.google.com/web/},
	publisher = {Google LLC},
	author = {google},
	year = {2020},
}

@article{zhang_geojmodelbuilder_2017,
	title = {{GeoJModelBuilder}: an open source geoprocessing workflow tool},
	volume = {2},
	issn = {2363-7501},
	shorttitle = {{GeoJModelBuilder}},
	url = {https://doi.org/10.1186/s40965-017-0022-7},
	doi = {10.1186/s40965-017-0022-7},
	abstract = {Scientific workflows have been commonly used in geospatial data analysis and Cyberinfrastructure. They allow distributed geoprocessing algorithms, models, data, and sensors to be chained together to support geospatial data analysis, and environmental monitoring, and integrated environmental modelling.},
	number = {1},
	urldate = {2021-11-30},
	journal = {Open Geospatial Data, Software and Standards},
	author = {Zhang, Mingda and Bu, Xiaoqian and Yue, Peng},
	month = apr,
	year = {2017},
	keywords = {Environmental monitoring, Geoprocessing services, Integrated environmental modelling, Open standards, Scientific workflow},
	pages = {8},
	file = {Full Text PDF:C\:\\Users\\Feenster\\Zotero\\storage\\BNWZVWAS\\Zhang et al. - 2017 - GeoJModelBuilder an open source geoprocessing wor.pdf:application/pdf;Snapshot:C\:\\Users\\Feenster\\Zotero\\storage\\NB29BE3D\\s40965-017-0022-7.html:text/html},
}

@article{kulawiak_analysis_2019,
	title = {Analysis of server-side and client-side {Web}-{GIS} data processing methods on the example of {JTS} and {JSTS} using open data from {OSM} and geoportal},
	volume = {129},
	issn = {0098-3004},
	url = {https://www.sciencedirect.com/science/article/pii/S009830041830092X},
	doi = {10.1016/j.cageo.2019.04.011},
	abstract = {The last decade has seen a rapid evolution of processing, analysis and visualization of freely available geographic data using Open Source Web-GIS. In the beginning, Web-based Geographic Information Systems employed a thick-client approach which required installation of platform-specific browser plugins. Later on, research focus shifted to platform-independent thin client solutions in which data processing and analysis was performed by the server machine. More recently, however, the rapid development of computer hardware as well as software technologies such has HTML5 has enabled the creation of platform-independent thick clients which offer advanced GIS functionalities such as geoprocessing. This article aims to analyse the current state of Open Source technologies and publicly available geographic data sources in the context of creating cost-effective Web-GIS applications for integration and processing of spatial data. For this purpose the article discusses the availability and potential of Web-GIS architectures, software libraries and data sources. The analysis of freely available data sources includes a discussion of the quality and accuracy of crowd-sourced as well as public sector data, while the investigation of software libraries and architectures involves a comparison of server-side and client-side data processing performance under a set of real-world scenarios. The article concludes with a discussion of the choice of cost-effective Web-GIS architectures, software libraries and data sources in the context of the institution and environment of system deployment.},
	language = {en},
	urldate = {2021-10-21},
	journal = {Computers \& Geosciences},
	author = {Kulawiak, Marcin and Dawidowicz, Agnieszka and Pacholczyk, Marek Emanuel},
	month = aug,
	year = {2019},
	keywords = {Architecture, Geoprocessing, JTS, OpenStreetMap, Performance, Web-GIS},
	pages = {26--37},
	file = {ScienceDirect Snapshot:C\:\\Users\\Feenster\\Zotero\\storage\\GWLM2PDG\\S009830041830092X.html:text/html},
}

@article{sit_optimized_2019,
	title = {Optimized watershed delineation library for server-side and client-side web applications},
	volume = {4},
	issn = {2363-7501},
	url = {https://doi.org/10.1186/s40965-019-0068-9},
	doi = {10.1186/s40965-019-0068-9},
	abstract = {The advancements and new techniques in information technologies are making it possible to acquire large-scale spatial data through satellites, radars and sensor networks. The collection of vast amounts of environmental data increased the demand for applications which can manage and process large-scale and high-resolution data sets in real-time. One of the important tasks for organizing and customizing hydrological data sets is the delineation of watersheds on demand. Watershed delineation is a process for creating a boundary that represents the contributing area for a specific control point or water outlet, with the intent of characterization and analysis of portions of a study area. Although many GIS tools and software are available for watershed analysis on desktop systems, there is a need for optimized libraries for client-side and server-side web applications for creating a dynamic and interactive environment for exploring hydrological data. In this project, we developed and demonstrated several watershed delineation techniques on the web, with seven different use cases implemented on the client-side using JavaScript, WebAssembly, and WebGL and on the server-side using Python, Go, C, and Node.js. We also developed a client-side GPGPU (General Purpose Graphical Processing Unit) algorithm to analyze high-resolution terrain data for watershed delineation by benefiting from the parallelizable nature of GPUs. The web-based real-time analysis of watershed segmentation can be helpful for decision-makers and stakeholders while eliminating the need of installing complex software packages and dealing with large-scale data sets.},
	language = {en},
	number = {1},
	urldate = {2021-10-21},
	journal = {Open Geospatial Data, Software and Standards},
	author = {Sit, Muhammed and Sermet, Yusuf and Demir, Ibrahim},
	month = aug,
	year = {2019},
	pages = {8},
	file = {Springer Full Text PDF:C\:\\Users\\Feenster\\Zotero\\storage\\HE2RNNXI\\Sit et al. - 2019 - Optimized watershed delineation library for server.pdf:application/pdf},
}

@article{zhao_geoprocessing_2012,
	series = {Towards a {Geoprocessing} {Web}},
	title = {The {Geoprocessing} {Web}},
	volume = {47},
	issn = {0098-3004},
	url = {https://www.sciencedirect.com/science/article/pii/S0098300412001446},
	doi = {10.1016/j.cageo.2012.04.021},
	abstract = {As Web services technology has matured in recent years, an increasing amount of geospatial resources and processing functions are available in the form of online Web services. Consequently, effective and efficient data processing methods for geospatial information extraction and knowledge discovery over the Web are a major challenge for research and industry. The Geoprocessing Web, which consists of light-weight protocols, crowd-sourcing capability, and the capability to process real-time geospatial data sources provided by sensors, enables distributed, interoperable and collaborative processing of geospatial data for information and knowledge discovery. This paper provides a comprehensive overview about the state-of-the-art architecture and technologies, and the most recent developments in the Geoprocessing Web.},
	language = {en},
	urldate = {2021-10-21},
	journal = {Computers \& Geosciences},
	author = {Zhao, Peisheng and Foerster, Theodor and Yue, Peng},
	month = oct,
	year = {2012},
	keywords = {Geoprocessing Web, Geospatial Web service, Real-time geospatial information, Semantic web, Volunteered geographic information, Web processing service},
	pages = {3--12},
	file = {ScienceDirect Snapshot:C\:\\Users\\Feenster\\Zotero\\storage\\494JTMHN\\S0098300412001446.html:text/html},
}

@article{beilschmidt_vat_2017,
	title = {{VAT}: {A} {Scientific} {Toolbox} for {Interactive} {Geodata} {Exploration}},
	volume = {17},
	issn = {1610-1995},
	shorttitle = {{VAT}},
	url = {https://doi.org/10.1007/s13222-017-0266-5},
	doi = {10.1007/s13222-017-0266-5},
	abstract = {Data-driven research requires interactive systems supporting fast and intuitive data exploration. An important component is the user interface that facilitates this process. In biodiversity research, data is commonly of spatio-temporal nature. This poses unique opportunities for visual analytics approaches. In this paper we present the core concepts of the web-based front end of our vat (Visualization, Analysis and Transformation) system, a distributed geo-processing application. We present the results of two user studies and highlight unique features, among others for the management of time and the generalization of data.},
	language = {en},
	number = {3},
	urldate = {2021-10-20},
	journal = {Datenbank-Spektrum},
	author = {Beilschmidt, Christian and Drönner, Johannes and Mattig, Michael and Schmidt, Marco and Authmann, Christian and Niamir, Aidin and Hickler, Thomas and Seeger, Bernhard},
	month = nov,
	year = {2017},
	pages = {233--243},
	file = {Springer Full Text PDF:C\:\\Users\\Feenster\\Zotero\\storage\\HU73N7Q4\\Beilschmidt et al. - 2017 - VAT A Scientific Toolbox for Interactive Geodata .pdf:application/pdf},
}

@incollection{warmerdam_geospatial_2008,
	address = {Berlin, Heidelberg},
	series = {Advances in {Geographic} {Information} {Science}},
	title = {The {Geospatial} {Data} {Abstraction} {Library}},
	isbn = {978-3-540-74831-1},
	url = {https://doi.org/10.1007/978-3-540-74831-1_5},
	abstract = {Abstract This chapter presents an overview of the development and characteristics of the Geospatial Data Abstraction Library (GDAL), a widely used Open Source library for reading and writing a large variety of raster spatial data formats. The library has evolved substantially since its origins in 1998. It supports its own data model and application programming interface (API). From its initial single developer origins, GDAL has grown into a distributed project that has a relatively large number of contributing developers. The chapter discusses the origins of the project, its design philosophy, the data model, and directions for future development.},
	language = {en},
	urldate = {2021-10-19},
	booktitle = {Open {Source} {Approaches} in {Spatial} {Data} {Handling}},
	publisher = {Springer},
	author = {Warmerdam, Frank},
	editor = {Hall, G. Brent and Leahy, Michael G.},
	year = {2008},
	doi = {10.1007/978-3-540-74831-1_5},
	keywords = {Application Programming Interface, Colour Table, Geographic Information System, Open Geospatial Consortium, Open Source Library},
	pages = {87--104},
	file = {Springer Full Text PDF:C\:\\Users\\Feenster\\Zotero\\storage\\T98FZCLK\\Warmerdam - 2008 - The Geospatial Data Abstraction Library.pdf:application/pdf},
}

@inproceedings{sandhu_sparse_2018,
	address = {New York, NY, USA},
	series = {{ManLang} '18},
	title = {Sparse matrices on the web: {Characterizing} the performance and optimal format selection of sparse matrix-vector multiplication in {JavaScript} and {WebAssembly}},
	isbn = {978-1-4503-6424-9},
	shorttitle = {Sparse matrices on the web},
	url = {https://doi.org/10.1145/3237009.3237020},
	doi = {10.1145/3237009.3237020},
	abstract = {JavaScript is the most widely used language for web programming, and now increasingly becoming popular for high performance computing, data-intensive applications, and deep learning. More recently, WebAssembly has been introduced as a typed low-level bytecode representation which promises to enable better performance. Sparse matrix-vector multiplication (SpMV) is an important kernel that is considered critical for the performance of compute-intensive applications. In SpMV, the optimal selection of storage format is one of the key aspects of enabling the best performance. This paper describes the distinctive nature of the performance and choice of optimal sparse matrix storage format for sequential SpMV for the managed languages JavaScript and WebAssembly, as compared to native languages like C. We performed exhaustive experiments with 2000 real-life sparse matrices. To evaluate the experimental data in a rigorous manner we introduced the notion of x\%-affinity which allows us to identify with certainty those storage formats that are at least x\% better than all other formats. We explored three main research questions. First, we examined the difference in performance between native C and both JavaScript and WebAssembly, for two major browsers, Firefox and Chrome. For JavaScript, we observed that the best performing browser demonstrated a slowdown of only 2.2x to 5.8x versus C. Somewhat surprisingly, for WebAssembly, we observed similar or better performance as compared to C, for the best performing browser. Second, we explored the performance of single-precision versus double-precision SpMV. In contrast to C, in JavaScript and WebAssembly, we found that double-precision is often more efficient than single-precision. Lastly, we examined the choice of optimal storage format. Interestingly, the best format choices are very different for C as compared to both JavaScript and WebAssembly, and even quite different between the two browsers.},
	urldate = {2021-10-19},
	booktitle = {Proceedings of the 15th {International} {Conference} on {Managed} {Languages} \& {Runtimes}},
	publisher = {Association for Computing Machinery},
	author = {Sandhu, Prabhjot and Herrera, David and Hendren, Laurie},
	month = sep,
	year = {2018},
	keywords = {C, javascript, managed languages for browsers, scientific computing, something about wasm performance, sparse matrix-vector multiplication, SpMV, webassembly},
	pages = {1--13},
	file = {Full Text PDF:C\:\\Users\\Feenster\\Zotero\\storage\\CYD7HRKR\\Sandhu et al. - 2018 - Sparse matrices on the web Characterizing the per.pdf:application/pdf},
}

@article{fabri_design_2000,
	title = {On the design of {CGAL} a computational geometry algorithms library},
	volume = {30},
	issn = {1097-024X},
	url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/1097-024X%28200009%2930%3A11%3C1167%3A%3AAID-SPE337%3E3.0.CO%3B2-B},
	doi = {10.1002/1097-024X(200009)30:11<1167::AID-SPE337>3.0.CO;2-B},
	abstract = {CGAL is a Computational Geometry Algorithms Library written in C++, which is being developed by research groups in Europe and Israel. The goal is to make the large body of geometric algorithms developed in the field of computational geometry available for industrial application. We discuss the major design goals for CGAL, which are correctness, flexibility, ease-of-use, efficiency, and robustness, and present our approach to reach these goals. Generic programming using templates in C++ plays a central role in the architecture of CGAL. We give a short introduction to generic programming in C++, compare it to the object-oriented programming paradigm, and present examples where both paradigms are used effectively in CGAL. Moreover, we give an overview of the current structure of the CGAL-library and consider software engineering aspects in the CGAL-project. Copyright © 2000 John Wiley \& Sons, Ltd.},
	language = {en},
	number = {11},
	urldate = {2021-10-19},
	journal = {Software: Practice and Experience},
	author = {Fabri, Andreas and Giezeman, Geert-Jan and Kettner, Lutz and Schirra, Stefan and Schönherr, Sven},
	year = {2000},
	note = {\_eprint: https://onlinelibrary.wiley.com/doi/pdf/10.1002/1097-024X\%28200009\%2930\%3A11\%3C1167\%3A\%3AAID-SPE337\%3E3.0.CO\%3B2-B},
	keywords = {C++, computational geometry, generic programming, software library},
	pages = {1167--1202},
	file = {Full Text PDF:C\:\\Users\\Feenster\\Zotero\\storage\\GAYEHLF5\\Fabri et al. - 2000 - On the design of CGAL a computational geometry alg.pdf:application/pdf;Snapshot:C\:\\Users\\Feenster\\Zotero\\storage\\HA8C79AN\\1097-024X(200009)30111167AID-SPE3373.0.html:text/html},
}

@inproceedings{fabri_cgal_2009,
	address = {New York, NY, USA},
	series = {{GIS} '09},
	title = {{CGAL}: the {Computational} {Geometry} {Algorithms} {Library}},
	isbn = {978-1-60558-649-6},
	shorttitle = {{CGAL}},
	url = {https://doi.org/10.1145/1653771.1653865},
	doi = {10.1145/1653771.1653865},
	abstract = {We present fundamental geometric data structures and algorithms offered by CGAL, the Computational Geometry Algorithms Library. As geometry is ubiquitous this library is used by application developers in medical imaging, VLSI, CAD/CAM, geophysics, computer graphics and last but not least GIS. In this demo we focus on those parts of CGAL which are relevant for geographic information systems software development.},
	urldate = {2021-10-19},
	booktitle = {Proceedings of the 17th {ACM} {SIGSPATIAL} {International} {Conference} on {Advances} in {Geographic} {Information} {Systems}},
	publisher = {Association for Computing Machinery},
	author = {Fabri, Andreas and Pion, Sylvain},
	month = nov,
	year = {2009},
	keywords = {C++, generic programming, exact geometric computing, geometric data structures and algorithms, open source},
	pages = {538--539},
	file = {Full Text PDF:C\:\\Users\\Feenster\\Zotero\\storage\\KGN33ZSX\\Fabri and Pion - 2009 - CGAL the Computational Geometry Algorithms Librar.pdf:application/pdf},
}

@inproceedings{zakai_emscripten_2011,
	address = {New York, NY, USA},
	series = {{OOPSLA} '11},
	title = {Emscripten: an {LLVM}-to-{JavaScript} compiler},
	isbn = {978-1-4503-0942-4},
	shorttitle = {Emscripten},
	url = {https://doi.org/10.1145/2048147.2048224},
	doi = {10.1145/2048147.2048224},
	abstract = {We present Emscripten, a compiler from LLVM (Low Level Virtual Machine) assembly to JavaScript. This opens up two avenues for running code written in languages other than JavaScript on the web: (1) Compile code directly into LLVM assembly, and then compile that into JavaScript using Emscripten, or (2) Compile a language's entire runtime into LLVM and then JavaScript, as in the previous approach, and then use the compiled runtime to run code written in that language. For example, the former approach can work for C and C++, while the latter can work for Python; all three examples open up new opportunities for running code on the web. Emscripten itself is written in JavaScript and is available under the MIT license (a permissive open source license), at http://www.emscripten.org. As a compiler from LLVM to JavaScript, the challenges in designing Emscripten are somewhat the reverse of the norm - one must go from a low-level assembly into a high-level language, and recreate parts of the original high-level structure of the code that were lost in the compilation to low-level LLVM. We detail the methods used in Emscripten to deal with those challenges, and in particular present and prove the validity of Emscripten's Relooper algorithm, which recreates high-level loop structures from low-level branching data.},
	urldate = {2021-10-19},
	booktitle = {Proceedings of the {ACM} international conference companion on {Object} oriented programming systems languages and applications companion},
	publisher = {Association for Computing Machinery},
	author = {Zakai, Alon},
	month = oct,
	year = {2011},
	keywords = {javascript, decompiler, llvm},
	pages = {301--312},
	file = {Full Text PDF:C\:\\Users\\Feenster\\Zotero\\storage\\22SKIIEH\\Zakai - 2011 - Emscripten an LLVM-to-JavaScript compiler.pdf:application/pdf},
}

@article{watt_weakening_2019,
	title = {Weakening {WebAssembly}},
	volume = {3},
	url = {https://doi.org/10.1145/3360559},
	doi = {10.1145/3360559},
	abstract = {WebAssembly (Wasm) is a safe, portable virtual instruction set that can be hosted in a wide range of environments, such as a Web browser. It is a low-level language whose instructions are intended to compile directly to bare hardware. While the initial version of Wasm focussed on single-threaded computation, a recent proposal extends it with low-level support for multiple threads and atomic instructions for synchronised access to shared memory. To support the correct compilation of concurrent programs, it is necessary to give a suitable specification of its memory model. Wasm's language definition is based on a fully formalised specification that carefully avoids undefined behaviour. We present a substantial extension to this semantics, incorporating a relaxed memory model, along with a few proposed extensions. Wasm's memory model is unique in that its linear address space can be dynamically grown during execution, while all accesses are bounds-checked. This leads to the novel problem of specifying how observations about the size of the memory can propagate between threads. We argue that, considering desirable compilation schemes, we cannot give a sequentially consistent semantics to memory growth. We show that our model provides sequential consistency for data-race-free executions (SC-DRF). However, because Wasm is to run on the Web, we must also consider interoperability of its model with that of JavaScript. We show, by counter-example, that JavaScript's memory model is not SC-DRF, in contrast to what is claimed in its specification. We propose two axiomatic conditions that should be added to the JavaScript model to correct this difference. We also describe a prototype SMT-based litmus tool which acts as an oracle for our axiomatic model, visualising its behaviours, including memory resizing.},
	number = {OOPSLA},
	urldate = {2021-10-06},
	journal = {Proceedings of the ACM on Programming Languages},
	author = {Watt, Conrad and Rossberg, Andreas and Pichon-Pharabod, Jean},
	month = oct,
	year = {2019},
	keywords = {assembly languages, just-in-time compilers, programming languages, type systems, Virtual machines},
	pages = {133:1--133:28},
	file = {Full Text PDF:C\:\\Users\\Feenster\\Zotero\\storage\\GUEQC3CA\\Watt et al. - 2019 - Weakening WebAssembly.pdf:application/pdf},
}

@inproceedings{jangda_not_2019,
	address = {-},
	title = {Not {So} {Fast}: {Analyzing} the {Performance} of {WebAssembly} vs. {Native} {Code}},
	volume = {-},
	isbn = {978-1-939133-03-8},
	shorttitle = {Not {So} {Fast}},
	url = {https://www.usenix.org/conference/atc19/presentation/jangda},
	language = {en},
	urldate = {2021-10-06},
	booktitle = {-},
	publisher = {-},
	author = {Jangda, Abhinav and Powers, Bobby and Berger, Emery D. and Guha, Arjun},
	year = {2019},
	pages = {107--120},
	file = {Full Text PDF:C\:\\Users\\Feenster\\Zotero\\storage\\3JJ6GND2\\Jangda et al. - 2019 - Not So Fast Analyzing the Performance of WebAssem.pdf:application/pdf;Snapshot:C\:\\Users\\Feenster\\Zotero\\storage\\866NIS3P\\jangda.html:text/html},
}

@inproceedings{haas_bringing_2017,
	address = {New York, NY, USA},
	series = {{PLDI} 2017},
	title = {Bringing the web up to speed with {WebAssembly}},
	isbn = {978-1-4503-4988-8},
	url = {https://doi.org/10.1145/3062341.3062363},
	doi = {10.1145/3062341.3062363},
	abstract = {The maturation of the Web platform has given rise to sophisticated and demanding Web applications such as interactive 3D visualization, audio and video software, and games. With that, efficiency and security of code on the Web has become more important than ever. Yet JavaScript as the only built-in language of the Web is not well-equipped to meet these requirements, especially as a compilation target. Engineers from the four major browser vendors have risen to the challenge and collaboratively designed a portable low-level bytecode called WebAssembly. It offers compact representation, efficient validation and compilation, and safe low to no-overhead execution. Rather than committing to a specific programming model, WebAssembly is an abstraction over modern hardware, making it language-, hardware-, and platform-independent, with use cases beyond just the Web. WebAssembly has been designed with a formal semantics from the start. We describe the motivation, design and formal semantics of WebAssembly and provide some preliminary experience with implementations.},
	urldate = {2021-10-06},
	booktitle = {Proceedings of the 38th {ACM} {SIGPLAN} {Conference} on {Programming} {Language} {Design} and {Implementation}},
	publisher = {Association for Computing Machinery},
	author = {Haas, Andreas and Rossberg, Andreas and Schuff, Derek L. and Titzer, Ben L. and Holman, Michael and Gohman, Dan and Wagner, Luke and Zakai, Alon and Bastien, JF},
	month = jun,
	year = {2017},
	keywords = {assembly languages, just-in-time compilers, programming languages, type systems, virtual machines},
	pages = {185--200},
	file = {Full Text PDF:C\:\\Users\\Feenster\\Zotero\\storage\\EIFS6I6B\\Haas et al. - 2017 - Bringing the web up to speed with WebAssembly.pdf:application/pdf},
}

@article{francese_iconic_2017,
	series = {{SI}:{In} honor of {Prof} {SK} {Chang}},
	title = {Iconic languages: {Towards} end-user programming of mobile applications},
	volume = {38},
	issn = {1045-926X},
	shorttitle = {Iconic languages},
	url = {https://www.sciencedirect.com/science/article/pii/S1045926X1530063X},
	doi = {10.1016/j.jvlc.2016.10.009},
	abstract = {After tracing the steps that led to the current generation of iconic languages starting from the original idea of S.K. Chang, we describe an iconic language, named MicroApp, for modeling pervasive mobile applications directly on the mobile device. MicroApp exploits generalized icons for composing mobile applications: services are represented by icons and are composed of adopting colors for representing data-flow. We also qualitatively evaluate the visual environment that implements this iconic language.},
	language = {en},
	urldate = {2022-08-18},
	journal = {Journal of Visual Languages \& Computing},
	author = {Francese, Rita and Risi, Michele and Tortora, Genoveffa},
	month = feb,
	year = {2017},
	keywords = {Visual programming, Iconic languages, Mobile development, Visual languages},
	pages = {1--8},
	file = {ScienceDirect Snapshot:C\:\\Users\\Feenster\\Zotero\\storage\\YE4D6ESA\\S1045926X1530063X.html:text/html},
}

@book{noauthor_end-user_nodate,
	title = {End-{User} {Development}},
	url = {https://www.interaction-design.org/literature/book/the-encyclopedia-of-human-computer-interaction-2nd-ed/end-user-development},
	abstract = {Authoritative overview of End-User Development (EUD) including 4 HD video interviews filmed in Rome, Italy. EUD is really all about democratization of computing.},
	language = {en},
	urldate = {2022-08-18},
	file = {Snapshot:C\:\\Users\\Feenster\\Zotero\\storage\\6SPNRRZJ\\end-user-development.html:text/html},
}

@misc{fed_predictions_nodate,
	title = {Predictions 2021: {Software} {Development}},
	shorttitle = {Predictions 2021},
	url = {https://www.forrester.com/report/title/RES175362},
	abstract = {2020 created momentum for remote development, work management \& more. In this report, we explore Forrester’s predictions for software development in 2021.},
	language = {en},
	urldate = {2022-08-18},
	journal = {Forrester},
	author = {FED},
	file = {Snapshot:C\:\\Users\\Feenster\\Zotero\\storage\\KNQ8WX5J\\RES175362.html:text/html},
}

@misc{ltd_low-code_nodate,
	title = {Low-{Code} {Development} {Platform} {Market} {Research} {Report} - {Global} {Industry} {Analysis}, {Trends} and {Growth} {Forecast} to 2030},
	url = {https://www.researchandmarkets.com/reports/5184624/low-code-development-platform-market-research},
	abstract = {Low-Code Development Platform Market Research Report - Global Industry Analysis, Trends and Growth Forecast to 2030},
	language = {english},
	urldate = {2022-08-18},
	author = {ltd, Research {and} Markets},
	file = {Snapshot:C\:\\Users\\Feenster\\Zotero\\storage\\9DJ455ZZ\\low-code-development-platform-market-research.html:text/html},
}

@book{morrison_flow-based_2010,
	address = {Unionville, Ont.},
	edition = {2nd edition},
	title = {Flow-{Based} {Programming}, 2nd {Edition}: {A} {New} {Approach} to {Application} {Development}},
	isbn = {978-1-4515-4232-5},
	shorttitle = {Flow-{Based} {Programming}, 2nd {Edition}},
	language = {English},
	publisher = {CreateSpace Independent Publishing Platform},
	author = {Morrison, J. Paul},
	month = may,
	year = {2010},
}

@inproceedings{sousa_dataflow_2012,
	title = {Dataflow {Programming}: {Concept}, {Languages} and {Applications}},
	shorttitle = {Dataflow {Programming}},
	booktitle = {-},
	author = {Sousa, Tiago},
	month = jan,
	year = {2012},
	file = {Full Text PDF:C\:\\Users\\Feenster\\Zotero\\storage\\ESDRISNV\\Sousa - 2012 - Dataflow Programming Concept, Languages and Appli.pdf:application/pdf},
}

@misc{akhmechet_functional_2006,
	title = {Functional {Programming} {For} {The} {Rest} of {Us}},
	url = {https://www.defmacro.org/2006/06/19/fp.html},
	language = {en},
	urldate = {2022-08-18},
	journal = {defmacro},
	author = {Akhmechet, Slava},
	month = jun,
	year = {2006},
	file = {Snapshot:C\:\\Users\\Feenster\\Zotero\\storage\\JDB8R5G7\\fp.html:text/html},
}

@misc{noauthor_geotiffio_nodate,
	title = {{GeoTIFF}.io},
	url = {//},
	language = {en-us},
	urldate = {2022-08-19},
	file = {Snapshot:C\:\\Users\\Feenster\\Zotero\\storage\\IPTWR9GF\\geotiff.io.html:text/html},
}

@misc{noauthor_geotrellis_nodate,
	title = {{GeoTrellis} - {Home}},
	url = {https://geotrellis.io/},
	urldate = {2022-08-19},
	file = {GeoTrellis - Home:C\:\\Users\\Feenster\\Zotero\\storage\\CHCEL464\\geotrellis.io.html:text/html},
}

@article{resnick_scratch_2009,
	title = {Scratch: programming for all},
	volume = {52},
	issn = {0001-0782},
	shorttitle = {Scratch},
	url = {https://doi.org/10.1145/1592761.1592779},
	doi = {10.1145/1592761.1592779},
	abstract = {"Digital fluency" should mean designing, creating, and remixing, not just browsing, chatting, and interacting.},
	number = {11},
	urldate = {2022-08-21},
	journal = {Communications of the ACM},
	author = {Resnick, Mitchel and Maloney, John and Monroy-Hernández, Andrés and Rusk, Natalie and Eastmond, Evelyn and Brennan, Karen and Millner, Amon and Rosenbaum, Eric and Silver, Jay and Silverman, Brian and Kafai, Yasmin},
	month = nov,
	year = {2009},
	pages = {60--67},
}

@misc{noauthor_browser_nodate,
	title = {Browser market share},
	url = {https://netmarketshare.com/browser-market-share.aspx?options=%7B%22filter%22%3A%7B%22%24and%22%3A%5B%7B%22deviceType%22%3A%7B%22%24in%22%3A%5B%22Desktop%2Flaptop%22%5D%7D%7D%5D%7D%2C%22dateLabel%22%3A%22Custom%22%2C%22attributes%22%3A%22share%22%2C%22group%22%3A%22browser%22%2C%22sort%22%3A%7B%22share%22%3A-1%7D%2C%22id%22%3A%22browsersDesktop%22%2C%22dateInterval%22%3A%22Monthly%22%2C%22dateStart%22%3A%222021-10%22%2C%22dateEnd%22%3A%222021-10%22%2C%22segments%22%3A%22-1000%22%7D},
	urldate = {2022-09-06},
	file = {Browser market share:C\:\\Users\\Feenster\\Zotero\\storage\\DE5Q5TVK\\browser-market-share.html:text/html},
}

@misc{noauthor_w3counter_nodate,
	title = {{W3Counter}: {Global} {Web} {Stats}},
	url = {https://www.w3counter.com/globalstats.php},
	urldate = {2022-09-06},
	file = {W3Counter\: Global Web Stats:C\:\\Users\\Feenster\\Zotero\\storage\\TAHCWY7L\\globalstats.html:text/html},
}

@misc{noauthor_dashiki_nodate,
	title = {Dashiki: {Simple} {Request} {Breakdowns}},
	url = {https://analytics.wikimedia.org/dashboards/browsers/#desktop-site-by-browser/browser-family-timeseries},
	urldate = {2022-09-06},
	file = {Dashiki\: Simple Request Breakdowns:C\:\\Users\\Feenster\\Zotero\\storage\\4C2AM84Q\\browsers.html:text/html},
}

@misc{noauthor_browser_nodate-1,
	title = {Browser {Market} {Share} {Worldwide}},
	url = {https://gs.statcounter.com/browser-market-share},
	abstract = {This graph shows the market share of browsers worldwide based on over 5 billion monthly page views.},
	language = {en},
	urldate = {2022-09-06},
	journal = {StatCounter Global Stats},
	file = {Snapshot:C\:\\Users\\Feenster\\Zotero\\storage\\2K5SHZ9N\\browser-market-share.html:text/html},
}

@inproceedings{ammann_maplibre-rs_2022,
	title = {{MAPLIBRE}-{RS}: {TOWARD} {PORTABLE} {MAP} {RENDERERS}},
	volume = {XLVIII-4-W1-2022},
	shorttitle = {{MAPLIBRE}-{RS}},
	url = {https://www.int-arch-photogramm-remote-sens-spatial-inf-sci.net/XLVIII-4-W1-2022/35/2022/},
	doi = {10.5194/isprs-archives-XLVIII-4-W1-2022-35-2022},
	abstract = {{\textless}p{\textgreater}{\textless}strong class="journal-contentHeaderColor"{\textgreater}Abstract.{\textless}/strong{\textgreater} Map renderers play a crucial role in Web, desktop, and mobile applications. In this context, code portability is a common problem, often addressed by maintaining multiple code bases: one for theWeb, usually written in JavaScript, and one for desktop and mobile, often written in C/C++. The maintenance of several code bases slows down innovation and makes evolution time-consuming. In this paper, we review existing open-source map renderers, examine how they address this problem, and identify the downsides of the current strategies. With a proof of concept, we demonstrate that Rust, WebAssembly, and WebGPU are now sufficiently mature to address this problem. Our new open-source map renderer written in Rust runs on all platforms and showcases good performance. Finally, we explain the challenges and limitations encountered while implementing a modern map renderer with these technologies.{\textless}/p{\textgreater}},
	language = {English},
	urldate = {2022-09-12},
	booktitle = {The {International} {Archives} of the {Photogrammetry}, {Remote} {Sensing} and {Spatial} {Information} {Sciences}},
	publisher = {Copernicus GmbH},
	author = {Ammann, M. and Drabble, A. and Ingensand, J. and Chapuis, B.},
	month = aug,
	year = {2022},
	note = {ISSN: 1682-1750},
	pages = {35--42},
	file = {Full Text PDF:C\:\\Users\\Feenster\\Zotero\\storage\\ZMJJPJ8W\\Ammann et al. - 2022 - MAPLIBRE-RS TOWARD PORTABLE MAP RENDERERS.pdf:application/pdf;Snapshot:C\:\\Users\\Feenster\\Zotero\\storage\\2F5AZT84\\2022.html:text/html},
}

@misc{rutten_grasshopper_2012,
	title = {Grasshopper},
	url = {https://www.grasshopper3d.com/},
	abstract = {Grasshopper™ is a graphical algorithm editor tightly integrated with Rhino’s 3-D modeling tools.},
	language = {en},
	urldate = {2022-09-19},
	author = {Rutten, David},
	year = {2012},
	file = {Snapshot:C\:\\Users\\Feenster\\Zotero\\storage\\HI64MXE8\\www.grasshopper3d.com.html:text/html},
}

@misc{noauthor_comparison_nodate,
	title = {{COMPARISON} {AND} {EVALUATION} {OF} {DIFFERENT} {GIS} {SOFTWARE} {TOOLS} {TO} {ESTIMATE} {SOLAR} {IRRADIATION} - {ProQuest}},
	url = {https://www.proquest.com/openview/387107f723d874b3edcf446440e5bfd1/1?pq-origsite=gscholar&cbl=2037681},
	abstract = {Explore millions of resources from scholarly journals, books, newspapers, videos and more, on the ProQuest Platform.},
	language = {en},
	urldate = {2022-09-19},
	file = {Snapshot:C\:\\Users\\Feenster\\Zotero\\storage\\K57Y6ZNA\\1.html:text/html},
}

@misc{noauthor_geoflow_nodate,
	title = {Geoflow},
	url = {https://github.com/geoflow3d},
	urldate = {2022-09-19},
	file = {Geoflow:C\:\\Users\\Feenster\\Zotero\\storage\\DD9K7HYN\\geoflow3d.html:text/html},
}

@misc{noauthor_automated_2022,
	title = {Automated {3D} building reconstruction from point clouds},
	url = {https://github.com/geoflow3d/geoflow-bundle},
	urldate = {2022-09-19},
	publisher = {Geoflow},
	month = jul,
	year = {2022},
	note = {original-date: 2021-11-17T12:24:42Z},
}

@misc{noauthor_homepage_nodate,
	title = {Homepage - {OSGeo}},
	url = {https://www.osgeo.org/},
	urldate = {2022-09-19},
	file = {Homepage - OSGeo:C\:\\Users\\Feenster\\Zotero\\storage\\GKLRCZQD\\www.osgeo.org.html:text/html},
}

@misc{noauthor_geos_nodate,
	title = {{GEOS} {\textbar} {GEOS}},
	url = {https://libgeos.org/},
	urldate = {2022-09-19},
	file = {GEOS | GEOS:C\:\\Users\\Feenster\\Zotero\\storage\\ZSEIP3JP\\libgeos.org.html:text/html},
}

@misc{eberhardt_state_2022,
	title = {The {State} of {WebAssembly} 2022},
	url = {https://blog.scottlogic.com/2022/06/20/state-of-wasm-2022.html},
	urldate = {2022-09-21},
	author = {Eberhardt, Colin},
	year = {2022},
	file = {Snapshot:C\:\\Users\\Feenster\\Zotero\\storage\\L8G7YBS7\\state-of-wasm-2022.html:text/html;The State of WebAssembly 2022:C\:\\Users\\Feenster\\Zotero\\storage\\6BSNLJVR\\state-of-wasm-2022.html:text/html},
}

@misc{safe-software_fme_2022,
	title = {{FME} {Desktop} {\textbar} {Data} {Integration} and {Automation}},
	url = {https://www.safe.com/fme/fme-desktop/},
	abstract = {With support for hundreds of data formats and applications, FME Desktop is the all-in-one tool for data integration and productivity. Try it for free today!},
	language = {en},
	urldate = {2022-09-27},
	journal = {Safe Software},
	author = {Safe-Software},
	year = {2022},
	file = {Snapshot:C\:\\Users\\Feenster\\Zotero\\storage\\939BMZEK\\fme-desktop.html:text/html},
}

@article{sadeghipour_roudsari_ladybug_2013,
	title = {Ladybug: {A} parametric environmental plugin for grasshopper to help designers create an environmentally-conscious design},
	shorttitle = {Ladybug},
	abstract = {As high performance design is becoming more desirable in the field of architecture, the need for supporting architects with environmental analysis tools is also growing. Rhino/Grasshopper is one of the most widely used platforms that are used by designers today. There are already a number of environmental plugins developed for Rhino/Grasshopper. However, Ladybug offers several advantages that are currently not offered by existing Rhino/Grasshopper related environmental design plugins. Ladybug imports standard EnergyPlus Weather files (.EPW) in Grasshopper and provides a variety of 2D and 3D designer-friendly interactive graphics to support the decision-making process during the initial stages of design. It also simplifies the process of analysis, automates and expedites the calculations, and provides easy to understand graphical visualizations in the 3D modeling interface of Rhino/Grasshopper. It also allows users to work with validated energy and daylighting engines such as EnergyPlus, Radiance and Daysim. Integration with the parametric tools of grasshopper allows for almost instantaneous feedback on design modifications, and as it runs within the design environment, the information and analysis is interactive. The development is a free and open source; users can customize the tool based on their needs and contribute to the source code.Copyright},
	journal = {Proceedings of BS 2013: 13th Conference of the International Building Performance Simulation Association},
	author = {Sadeghipour Roudsari, Mostapha and Pak, M.},
	month = jan,
	year = {2013},
	pages = {3128--3135},
	file = {Full Text PDF:C\:\\Users\\Feenster\\Zotero\\storage\\FI675LCE\\Sadeghipour Roudsari and Pak - 2013 - Ladybug A parametric environmental plugin for gra.pdf:application/pdf},
}

@misc{turf_contributors_turfjs_2022,
	title = {Turf.js {\textbar} {Advanced} geospatial analysis},
	url = {https://turfjs.org/},
	urldate = {2022-09-27},
	author = {Turf Contributors},
	year = {2022},
	file = {Turf.js | Advanced geospatial analysis:C\:\\Users\\Feenster\\Zotero\\storage\\27FPD5KN\\turfjs.org.html:text/html},
}

@misc{noauthor_turfjsturf_2022,
	title = {Turfjs/turf},
	copyright = {MIT},
	url = {https://github.com/Turfjs/turf},
	abstract = {A modular geospatial engine written in JavaScript},
	urldate = {2022-09-27},
	publisher = {turf},
	month = sep,
	year = {2022},
	note = {original-date: 2013-10-03T14:50:25Z},
	keywords = {algorithm, computational-geometry, geojson, gis, javascript, turf},
}

@misc{janssen_mobius_2021,
	title = {Möbius {Modeller}},
	url = {https://mobius.design-automation.net/pages/mobius_modeller.html},
	language = {en-US},
	urldate = {2022-09-27},
	journal = {mobius-website},
	author = {Janssen, Patrick},
	year = {2021},
	file = {Snapshot:C\:\\Users\\Feenster\\Zotero\\storage\\EP3R5BL7\\mobius_modeller.html:text/html},
}

@misc{kalberer_awesome_2022,
	title = {Awesome {Geo} {Rust}},
	copyright = {CC0-1.0},
	url = {https://github.com/pka/awesome-georust},
	abstract = {A curated list of awesome geospatial software, libraries, tools and resources, written in Rust},
	urldate = {2022-09-27},
	author = {Kalberer, Pirmin},
	month = sep,
	year = {2022},
	note = {original-date: 2021-01-01T16:10:42Z},
}

@misc{google_techtalks_tangible_2007,
	title = {Tangible {Functional} {Programming}},
	url = {https://www.youtube.com/watch?v=faJ8N0giqzw},
	urldate = {2022-09-27},
	author = {{Google TechTalks}},
	month = nov,
	year = {2007},
}

@misc{noauthor_tangible_nodate,
	title = {Tangible {Functional} {Programming}},
	url = {http://conal.net/papers/Eros/},
	urldate = {2022-09-27},
	file = {Tangible Functional Programming:C\:\\Users\\Feenster\\Zotero\\storage\\XUXSV9PP\\Eros.html:text/html},
}

@misc{contributors_react_2022,
	title = {React – {A} {JavaScript} library for building user interfaces},
	url = {https://reactjs.org/},
	abstract = {A JavaScript library for building user interfaces},
	language = {en},
	urldate = {2022-09-27},
	author = {Contributors},
	year = {2022},
	file = {Snapshot:C\:\\Users\\Feenster\\Zotero\\storage\\LEEQZV2Y\\reactjs.org.html:text/html},
}

@misc{contributors_electron_2022,
	title = {Electron {\textbar} {Build} cross-platform desktop apps with {JavaScript}, {HTML}, and {CSS}.},
	url = {https://www.electronjs.org/},
	abstract = {Build cross-platform desktop apps with JavaScript, HTML, and CSS.},
	language = {en-US},
	urldate = {2022-09-27},
	author = {Contributors},
	year = {2022},
	file = {Snapshot:C\:\\Users\\Feenster\\Zotero\\storage\\LTDXWZ6U\\www.electronjs.org.html:text/html},
}

@misc{noauthor_webassembly_nodate,
	title = {{WebAssembly}},
	url = {https://webassembly.org/},
	urldate = {2022-09-27},
	file = {WebAssembly:C\:\\Users\\Feenster\\Zotero\\storage\\T73BWV2Z\\webassembly.org.html:text/html},
}

@misc{contributors_webassembly_2022,
	title = {{WebAssembly}},
	url = {https://webassembly.org/},
	urldate = {2022-09-27},
	author = {Contributors},
	year = {2022},
	file = {WebAssembly:C\:\\Users\\Feenster\\Zotero\\storage\\FEVZBAHK\\webassembly.org.html:text/html},
}
